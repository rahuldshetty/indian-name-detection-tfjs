{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","result","setResult","model","setModel","c2i","shape","useEffect","tf","then","a","process","_model","className","gender","url","window","location","href","endsWith","src","get_gender_icon","style","margin","id","type","placeholder","onChange","arr","text","toLowerCase","i","length","match","push","vector_text","document","getElementById","value","tensor_pred","predict","dataSync","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sVAAe,I,uBCyEAA,MApEf,WAAgB,IAAD,EACeC,qBADf,mBACNC,EADM,KACEC,EADF,OAEYF,qBAFZ,mBAENG,EAFM,KAEAC,EAFA,KAGPC,EAAM,CAAC,IAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,IAE5OC,EAAQ,CAAC,EADC,IAoDhB,OAXAC,qBAAU,WAKR,OAJAC,MAAWC,KAAX,sBAAgB,4BAAAC,EAAA,sEACOF,IAAmBG,gDAD1B,OACRC,EADQ,OAEZR,EAASQ,GAFG,4CAIT,WACLR,IACAF,OAED,IAGD,sBAAKW,UAAU,MAAf,UACE,mEACA,sMAzBJ,SAAyBC,GACvB,IAAMC,EAAMC,OAAOC,SAASC,KAI5B,OAHIH,EAAII,SAAS,OACfJ,IAAG,mBAAI,MAEE,GAARD,EACM,qBAAKM,IAAKL,EAAM,eAET,GAARD,EAAkB,qBAAKM,IAAKL,EAAM,kBAArC,EAkBFM,CAAgBpB,GACjB,qBAAKqB,MAAO,CAACC,OAAO,QAApB,SACE,uBAAOC,GAAG,WAAWC,KAAK,OAAOC,YAAY,gBAAgBC,SAxCnE,WACEzB,IACA,IACI0B,EAlBN,SAAqBC,GACnBA,EAAOA,EAAKC,cAGZ,IADA,IAAIF,EAAM,GACFG,EAAE,EAAEA,EAAEF,EAAKG,OAAOD,IACrBF,EAAKE,GAAGE,MAAM,WACfL,EAAIM,KAAK7B,EAAIwB,EAAKE,KAEtB,IAAQA,EAAEH,EAAII,OAAOD,EAXP,GAWiBA,IAC7BH,EAAIM,KAAK,GAGX,OAAON,EAMGO,CADAC,SAASC,eAAe,YAAYC,OAG1CC,EAAcpC,EAAMqC,QAAQhC,IAAYoB,EAAKtB,IAAQmC,WAEvDvC,EADCqC,EAAY,GACH,EAEA,YCxBDG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.1935e867.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {useState, useEffect} from \"react\";\nimport * as tf from '@tensorflow/tfjs';\n\nfunction App() {\n  const [result, setResult] = useState();\n  const [model,setModel] = useState();\n  const c2i = {\" \": 0, \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10, \"k\": 11, \"l\": 12, \"m\": 13, \"n\": 14, \"o\": 15, \"p\": 16, \"q\": 17, \"r\": 18, \"s\": 19, \"t\": 20, \"u\": 21, \"v\": 22, \"w\": 23, \"x\": 24, \"y\": 25, \"z\": 26};\n  const max_len = 10;\n  const shape = [1, max_len];\n\n  function vector_text(text){\n    text = text.toLowerCase();\n    \n    let arr = [];\n    for(var i=0;i<text.length;i++){\n      if(text[i].match(\"[a-z ]\"))\n        arr.push(c2i[text[i]]);\n    }\n    for(var i=arr.length;i<max_len;i++){\n      arr.push(0);\n    }\n\n    return arr;\n  }\n\n  function handleSubmit(){\n    setResult();\n    let val = document.getElementById('input_id').value;\n    let arr = vector_text(val);\n    \n    let tensor_pred = model.predict(tf.tensor2d(arr, shape)).dataSync();\n    if(tensor_pred>0.5)\n      setResult(1)   \n    else\n      setResult(0)\n  }\n\n  function get_gender_icon(gender){\n    const url = window.location.href;\n    if(!url.endsWith(\"/\")){\n      url += \"/\"\n    }\n    if(gender==0){\n      return <img src={url + \"female.png\"}/>\n    }\n    else if(gender==1) return <img src={url + \"male.png\"}/>\n  }\n\n  useEffect(() => {\n    tf.ready().then(async ()=>{\n        let _model = await tf.loadLayersModel(process.env.PUBLIC_URL + `/model/model.json`);\n        setModel(_model);\n    })\n    return () => {\n      setModel();\n      setResult();\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Indian Name Gender Classification</h1>\n      <p>This is a React & Tensorflow.JS based project that uses Keras ML model to classify a given name as either femlae or male. The model has been trained on Indian Names.</p>\n      {get_gender_icon(result)}\n      <div style={{margin:\"auto\"}}>\n        <input id=\"input_id\" type=\"text\" placeholder=\"Enter name...\" onChange={handleSubmit}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}